<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:breezevideo="tc.littleb.breezevideo.*" 
	creationComplete="creationComplete();"  applicationComplete="Application.application.dispatchEvent(new ResizeEvent('resize'));"
	paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" 
	layout="absolute" verticalScrollPolicy="off" horizontalScrollPolicy="off"
	preloader="NicoFoxPreloader"
	backgroundColor="#FFFFFF"
	>
	
	<mx:Script>
		<![CDATA[
			
			import flash.display.Sprite;
			import mx.core.BitmapAsset;
			import mx.core.UIComponent;
			import mx.events.*;
			import mx.controls.Menu;
			import flash.events.Event;
			import flash.display.StageDisplayState;
			import tc.littleb.breezevideo.*;
			import flash.ui.*;
			
			public var hide_timeout_activated:Boolean;
			public var mouse_timeout_activated:Boolean;
			public var hide_timeout:Number;
			public var mouse_timeout:Number;
			
			[Embed(source="loading.png")]
			public var loadingImage:Class;
			
			[Embed(source="fullscreen.png")]
			public var screen_img_full:Class;
			[Embed(source="no_fullscreen.png")]
			public var screen_img_win:Class;
			
			
			[Embed(source="comment.png")]
			public var comment_img_yes:Class;
			[Embed(source="no_comment.png")]
			public var comment_img_no:Class;
			
			[Embed(source="repeat.png")]
			public var repeat_img_yes:Class;
			[Embed(source="no_repeat.png")]
			public var repeat_img_no:Class;

			[Embed(source="volume.png")]
			[Bindable]
			public var volume_img:Class;
			[Embed(source="no_volume.png")]
			[Bindable]
			public var volume_img_no:Class;

			
			
			[Embed(source="fullscreen.png")]
			[Bindable]
			public var screen_img:Class;			
			
			[Embed(source="no_repeat.png")]
			[Bindable]
			public var repeat_img:Class;
			
			private var _commentNumDetermined:Boolean = false;
			[Bindable]
			public var video_file:String;
			public var comment_file:String;			
			
			private var _menu:Menu;
			private var _menuProvider:Array = [];
			private var _CommentNumsForSwitch:Array = [0, 100, 250, 500, 1000];
			
			/* Cache time to reduce the writing to TextField ... Orz */
			private var _previousTime:int = -1;
			
			/* creationComplete */
			private function creationComplete():void
			{										
				drawLoading();
				video_file = Application.application.parameters.videoFile;
				bvideo.src = video_file;
				comment_file = Application.application.parameters.commentFile;
				
				/* Append menu */
				_menu = new Menu();
				commentButton.popUp = _menu;
				
				//bcomment.uploaderCommentFile = uploader_comment_file;
								
				bvideo.addEventListener('timeUpdate', updateTime);
				bvideo.addEventListener('seeked', updateSeeked);
				bvideo.addEventListener('ended', updatePlaybackStatus);				
				bvideo.addEventListener('loadedmetadata', updateMetadata);
				bvideo.addEventListener('loadedSwf', updateSwfLoaded);
				bcomment.addEventListener('commentReady', getCommentCount);
				
				slider.addEventListener(SliderEvent.CHANGE, jumpTime);
				pause.addEventListener(MouseEvent.CLICK, pauseVideo);
				commentButton.addEventListener(MouseEvent.CLICK, toggleComment);
				_menu.addEventListener(MenuEvent.ITEM_CLICK, changeCommentDisplayNum);
				repeat_switch.addEventListener(MouseEvent.CLICK, toggleRepeat);
				muteButton.addEventListener(MouseEvent.CLICK, toggleMute);
				volslider.addEventListener(SliderEvent.CHANGE, changeVolume);
				fullscreen.addEventListener(MouseEvent.CLICK, goFullscreen);				
				
				Application.application.addEventListener('resize', goResize );
				

			}
			/* Loading Frame, Phase 2: draw */
			private function drawLoading():void {
				var myBitmap:BitmapAsset = new loadingImage() as BitmapAsset;
				var myUI:UIComponent = new UIComponent();
				myUI.addChild(myBitmap);
				loadingCanvas.addChild(myUI);
			}
			/* Loading Frame, Phase 2: resize8 */
			private function resizeLoading():void {
				var myUI:UIComponent = UIComponent(loadingCanvas.getChildAt(0));
				myUI.graphics.beginFill(0x000000);
				//myUI.graphics.drawRect(0, 0, Application.application.width, Application.application.height);
				myUI.graphics.endFill();
				myUI.graphics.beginFill(0xEEEEEE);
				myUI.graphics.drawRect(0, Application.application.height - 40, Application.application.width, Application.application.height);
				//myUI.graphics.drawRoundRect(Application.application.width / 2 - 70, Application.application.height / 2 - 70, 140, 140, 30, 30);
				myUI.graphics.endFill();

				
				myUI.getChildAt(0).x = Application.application.width / 2 - 64;
				myUI.getChildAt(0).y = Application.application.height / 2 - 64;
			}
			
			/* When resize, reallocate components on the player */
			private function goResize(e:Event):void
			{
				if (loadingCanvas.visible) { resizeLoading(); }
				
				slider.width = 	Application.application.width - 420;
				var scale:Number;
				container2.y = Application.application.height - container2.height;
				if (Application.application.stage && 
				Application.application.stage.displayState != StageDisplayState.FULL_SCREEN)
				{
					container2.setStyle('backgroundAlpha', 1);
					screen_img = screen_img_full;
					/* Change from fullscreen to normal */
					if (hide_timeout_activated) {
						clearTimeout(hide_timeout);
						hide_timeout_activated = false;
						container2.visible = true;
					}				
					if (mouse_timeout_activated) {					
						clearTimeout(mouse_timeout);
						mouse_timeout_activated = false;
					}
					Mouse.show();
					big_container.removeEventListener(MouseEvent.MOUSE_MOVE, checkMouse);
					container2.removeEventListener(MouseEvent.MOUSE_OVER, checkMouse);
										
					
					black_container.width = 512;
					black_container.height = 384;
					// Let the Navigation back!
					container2.visible = true;
					scale = Math.min(((Application.application.height - container2.height) / 384), (Application.application.width / 512));
					black_container.height = Application.application.height - container2.height;
		
				} else {
					container2.setStyle('backgroundAlpha', 0.5);
					screen_img = screen_img_win;
					scale = Math.min((Application.application.height / 384), (Application.application.width / 512));
					black_container.height = Application.application.height;

					big_container.y = 0;
				
				}
				
				bcomment.scaleX = scale;
				bcomment.scaleY = scale;
				black_container.width = Application.application.width;
				
				
				bvideo.width = 512 * scale;
				bvideo.height = 384 * scale;
				
				black_container.x = 0;
				black_container.y = 0;
											
				
			}
			/* Switch to fullscreen, activate navigation and mouse hiding timeout */
			private function goFullscreen(e:Event):void
			{
				if (Application.application.stage.displayState == StageDisplayState.FULL_SCREEN)
				{
					Application.application.stage.displayState = StageDisplayState.NORMAL;					
				} else {
					var fullScreenRadio:Number = Application.application.stage.fullScreenWidth / Application.application.stage.fullScreenHeight;
					if (fullScreenRadio > 512 / 384) {
						stage.fullScreenSourceRect = new Rectangle(0, 0, 600 * fullScreenRadio, 600);
					} else {
						stage.fullScreenSourceRect = new Rectangle(0, 0, 800, 800 / fullScreenRadio);
					}
					Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
					big_container.addEventListener(MouseEvent.MOUSE_MOVE, checkMouse);
					container2.addEventListener(MouseEvent.MOUSE_OVER, checkMouse);					
				
					hide_timeout = setTimeout(hideNav, 1500);
					hide_timeout_activated = true;
					mouse_timeout = setTimeout(hideMouse, 1500);
					mouse_timeout_activated = true;	
				}
			}
			
			/* In fullscreen mode, when mouse moves, 
			 * show the pointer, and determine whether to show the navigation bar */
			private function checkMouse(e:MouseEvent):void 
			{	
				/* Pointer hide */			
				Mouse.show();
				if (!mouse_timeout_activated) {
					mouse_timeout = setTimeout(hideMouse, 1500);
					mouse_timeout_activated = true;						
				} else {
					clearTimeout(mouse_timeout);
					mouse_timeout_activated = false;	
				}				
				/* Bar hide */
				if (e.stageY >= Application.application.height - 40) {
					if (hide_timeout_activated) {
						clearTimeout(hide_timeout);
						hide_timeout_activated = false;
					}
					container2.visible = true;				
					// Reset the navigation timeout
				} else {
					if (!hide_timeout_activated) {
						hide_timeout = setTimeout(hideNav, 1500);
						hide_timeout_activated = true;						
					}
				}
			}
			
			/* Hide the navigation bar in the fullscreen mode */
			private function hideNav():void
			{
				if (container2.visible == true) {
					container2.visible = false;
					Mouse.hide();					
				}		

			}
			/* Hide the mouse in the fullscreen mode */
			private function hideMouse():void
			{
					Mouse.hide();
					clearTimeout(mouse_timeout);
					mouse_timeout_activated = false;	
			}			
			
			/* When user slides specific time on the slider... */
			private function jumpTime(e:SliderEvent):void
			{
				bvideo.currentTime = e.value;		
			}		
			
			/* Toggle the display of the comment */
			private function toggleComment(e:MouseEvent):void
			{
				bcomment.visible = !bcomment.visible;
				updateCommentButtonLabel();
			}
			/* When user selects number of comment to display.
			 * re-read the comments */
			private function changeCommentDisplayNum(e:MenuEvent):void
			{				
				var num:int = e.item.value;
				if (num > 0) {
					bcomment.commentDisplayNum = num;
					bcomment.visible = true;
					updateCommentButtonLabel();
				} else {
					bcomment.visible = false;
					updateCommentButtonLabel();
				}
			}
			
			/* Determine what should we displayed on the label of popup button */
			private function updateCommentButtonLabel():void {
				_menuProvider = [];
				if (bcomment.visible && bcomment.commentNum > 0) { 
					/* -1: All */
					if (bcomment.commentDisplayNum != bcomment.commentNum){
						commentButton.label = bcomment.commentDisplayNum.toString()  + '/' + bcomment.commentNum.toString();
					} else {
						commentButton.label = 'All ('+ bcomment.commentNum.toString() +')';
					}
					commentButton.setStyle('icon', comment_img_yes);

				} else {
					commentButton.label = "";
					commentButton.setStyle('icon', comment_img_no);
				}
				if (bcomment.commentNum > 0) {
					for (var i:int = 0; i < _CommentNumsForSwitch.length; i++) {
						var num:int = _CommentNumsForSwitch[i];
						if (bcomment.commentNum > num) {
							_menuProvider.push( {
								label: (num > 0)? num.toString() : 'Hide',
								value: num,
								type: 'radio',
								groupName: 'commentNum',
								toggled: ((bcomment.visible && bcomment.commentDisplayNum == num) || (!bcomment.visible && num == 0))
							}
							);
						}
					}
					_menuProvider.push( {
						label: 'All ('+bcomment.commentNum.toString()+')',
						value: bcomment.commentNum,
						type: 'radio',
						groupName: 'commentNum',
						toggled: (bcomment.visible && bcomment.commentNum == bcomment.commentDisplayNum)
					});
					_menu.dataProvider = _menuProvider;
				} else {
					_menu.dataProvider = null;
				}
				
				
			}
			
			/* Toggle whether to repeat */
			private function toggleRepeat(e:MouseEvent):void
			{
				bvideo.loop = !bvideo.loop;
				if (bvideo.loop) repeat_img = repeat_img_yes;
				else repeat_img = repeat_img_no;
			}
			/* Toggle whether to mute */
			private function toggleMute(e:MouseEvent):void
			{
				volslider.visible = !volslider.visible;
				if (volslider.visible) {
					bvideo.volume = volslider.value;
					muteButton.setStyle('icon', volume_img);
				} else {
					bvideo.volume = 0;
					muteButton.setStyle('icon', volume_img_no);
				}
			}
			private function changeVolume(e:SliderEvent):void {
				var num:Number = e.value;
				if (volslider.visible) {
					bvideo.volume = num;
				}
			}
			
			private function updateMetadata(e:Event):void
			{
				/* Set keyfrmaes */
				if (bvideo.keyframeTimes.length > 0) {
					slider.tickValues = bvideo.keyframeTimes.concat();
				}
				loadComment();
			}

					

			private function pauseVideo(e:MouseEvent):void
			{	
				if (bvideo.playing)
				{			
					bvideo.pause();
				}
				else
				{
					bvideo.play();					
				}
				updatePlaybackStatus(null);
			}	
			private function updatePlaybackStatus(e:Event):void
			{
				if (bvideo.playing)
				{			
					pause.label = "||";
				}
				else
				{					
					pause.label = ">";
				}
				
			}

			
			private function updateSeeked(e:Event):void
			{
				if (bcomment.commentDisplayNum > 0) {  
					bcomment.purgeIndex();
				}			
			}
			
			private function updateTime(e:Event):void			
			{
				/* Show comment */
				var vpos:Number = Math.floor(BreezeVideo(e.target).currentTime * 100);
				if (bcomment.commentDisplayNum > 0 && bcomment.visible) {  
					bcomment.prepareComment(vpos);
				}
				/* Update time text field */
				var currentTime:int = int(Math.floor(vpos / 100));
				/* Reduce TextField update frequency */
				if (_previousTime == currentTime) {
					return;
				} else {
					_previousTime = currentTime;
				}				
				var mins:int = int(Math.floor(currentTime / 60));
				var secs:int = currentTime % 60;
				
				var total:Number = Math.floor(BreezeVideo(e.target).duration);						
				var minsTotal:int = int(Math.floor(total / 60));
				var secsTotal:int = int(total % 60);
				
				timeText.text = zeroFillInt(mins) + ':' + zeroFillInt(secs) +
				            ' / '+zeroFillInt(minsTotal)+':'+zeroFillInt(secsTotal);				

			}
			/* A helper to fill zeros in the string representation of interger */
			private function zeroFillInt(num:int):String {
				if (num < 10) { return '0' + num.toString(); }
				else { return num.toString(); }
			}
				private function updateSwfLoaded(e:Event):void {
				loadComment();			
			}
			private function loadComment():void {				
				/* NOTE: This is called by onmetadata, 
				 * but onmetadata will be called every time when the video plays from the beginning */
				if (_commentNumDetermined) { return; }
				_commentNumDetermined = true;
				if (bvideo.duration < 60) {					
					bcomment.commentDisplayNum = 100;
				} else if (bvideo.duration < 300) {
					bcomment.commentDisplayNum = 250;					
				} else if (bvideo.duration < 600) {
					bcomment.commentDisplayNum = 500;
				} else {
					bcomment.commentDisplayNum = 1000;
				}
				bcomment.commentFile = comment_file;
//				commentButton.labelField = "@label";				
				updateCommentButtonLabel();
			}
			private function getCommentCount(e:Event):void {
				var vpos:Number = Math.floor(bvideo.currentTime * 100);
				bcomment.prepareComment(vpos);
				updateCommentButtonLabel();
				bvideo.play();
				loadingCanvas.visible = false;
			}
			
		]]>
	</mx:Script>

	<!-- We set playbackUpdateInterval as 20, because the "vpos" of comment XML is in 10 milliseconds -->	
    <mx:VBox id="big_container" width="100%" x="0" y="0" visible="true">    	   
		<mx:Canvas id="black_container" width="100%" height="384" backgroundColor="black">	
		<breezevideo:BreezeVideo id="bvideo" autoPlay="false" width="512" height="384" horizontalCenter="0" verticalCenter="0" volume="0.75" />
	    <!--<breezevideo:BreezeVideoOld width="512" height="384" volume="{volslider.value}" source="{video_file}" autoPlay="true" id="bvideo" playheadUpdateInterval="30" x="0" y="0" autoRewind="false"  horizontalCenter="0" verticalCenter="0"  />-->
		
        <!--<mx:Canvas id="comment_container" x="0" y="0" width="512" height="384"  visible="true" verticalScrollPolicy="off" horizontalScrollPolicy="off"  horizontalCenter="0" verticalCenter="0">-->
		<!--</mx:Canvas>-->
        <breezevideo:Comment id="bcomment" x="0" y="0" width="512" height="384"  visible="true" horizontalCenter="0" verticalCenter="0" />
        </mx:Canvas>
                
    </mx:VBox>
	    
    
    <mx:VBox id="container2" height="40" width="100%" backgroundColor="#EEEEEE" paddingTop="10" paddingLeft="10" paddingRight="10">        
        <mx:HBox horizontalGap="3">        	
        <mx:Button id="pause" label="||"/>
		<mx:HSlider id="slider" value="{bvideo.currentTime}"  maximum="{bvideo.duration}" slideDuration="0" liveDragging="true" />
		<mx:Text id="timeText" text="" minWidth="90" />
		
		<mx:Button id="repeat_switch" icon="{repeat_img}" width="25"/>							
		<mx:PopUpButton id="commentButton" width="120" />		
		
		<mx:Button id="muteButton" icon="{volume_img}" width="20" />
		<mx:HSlider id="volslider" showTrackHighlight="true" tickInterval="0.05" value="0.75" width="55"  maximum="1" />
		<mx:Button id="fullscreen" icon="{screen_img}" width="25" />
		
		</mx:HBox>
	</mx:VBox>
	<mx:Canvas id="loadingCanvas" width="100%" height="100%" x="0" y="0" backgroundColor="#000000"></mx:Canvas>	
 <!--<breezevideo:BreezeVideoOld id="bvideo" />-->
</mx:Application>
